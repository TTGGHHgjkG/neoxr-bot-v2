/*!
 * perfect-scrollbar v1.5.1
 * Copyright 2020 Hyunje Jun, MDBootstrap and Contributors
 * Licensed under MIT
 */

(function (root, factory) {
    if (typeof exports === 'object' && typeof module !== 'undefined') {
        module.exports = factory();
    } else if (typeof define === 'function' && define.amd) {
        define(factory);
    } else {
        root.PerfectScrollbar = factory();
    }
})(this, function () {
    'use strict';

    var abs = Math.abs;
    var floor = Math.floor;

    function extend(dest, src) {
        for (var key in src) {
            var val = src[key];
            if (typeof val === 'number') {
                val += 'px';
            }
            dest.style[key] = val;
        }
        return dest;
    }

    function create(elemClass) {
        var div = document.createElement('div');
        div.className = elemClass;
        return div;
    }

    function querySelector(element, selector) {
        if (!window.Element || !Element.prototype.matches) {
            throw new Error('No element matching method supported');
        }
        return element.querySelector(selector);
    }

    function removeElement(element) {
        if (element.remove) {
            element.remove();
        } else if (element.parentNode) {
            element.parentNode.removeChild(element);
        }
    }

    function filterChildren(element, selector) {
        return Array.prototype.filter.call(element.children, function (child) {
            return querySelector(child, selector);
        });
    }

    function addClass(element, className) {
        element.classList.add(className);
    }

    function removeClass(element, className) {
        element.classList.remove(className);
    }

    function hasClass(element, className) {
        return element.classList.contains(className);
    }

    function dispatchCustomEvent(element, eventName) {
        var event;
        if (typeof window.CustomEvent === 'function') {
            event = new CustomEvent(eventName);
        } else {
            event = document.createEvent('CustomEvent');
            event.initCustomEvent(eventName, false, false, undefined);
        }
        element.dispatchEvent(event);
    }

    function getInteger(value) {
        return parseInt(value, 10) || 0;
    }

    function isEditable(element) {
        return querySelector(element, 'input,[contenteditable]') || querySelector(element, 'select,[contenteditable]') || querySelector(element, 'textarea,[contenteditable]') || querySelector(element, 'button,[contenteditable]');
    }

    function getPadding(element) {
        var style = getComputedStyle(element);
        return getInteger(style.width) + getInteger(style.paddingLeft) + getInteger(style.paddingRight) + getInteger(style.borderLeftWidth) + getInteger(style.borderRightWidth);
    }

    function getRailMargin(element, side) {
        var style = getComputedStyle(element);
        return getInteger(style['margin' + side]);
    }

    function createEvent(name) {
        if (typeof window.CustomEvent === 'function') {
            return new CustomEvent(name);
        }
        var event = document.createEvent('CustomEvent');
        event.initCustomEvent(name, false, false, undefined);
        return event;
    }

    function getDeltaX(event) {
        var deltaX = event.deltaX;
        var deltaY = event.deltaY;
        if (event.shiftKey && !deltaX) {
            deltaX = deltaY;
            deltaY = 0;
        }
        return [deltaX, deltaY];
    }

    function resetReach(element, axis) {
        element.reach[axis] = null;
        if (element.element[axis] <= 0) {
            element.reach[axis] = 'start';
        }
        if (element.element[axis] >= element[axis] - element.container[axis]) {
            element.reach[axis] = 'end';
        }
    }

    function move(element, delta, axis, dir, scroll) {
        resetReach(element, axis);
        var contentMeasure = axis[0].toUpperCase() + axis.slice(1);
        var containerMeasure = 'container' + contentMeasure;
        var containerDelta = containerMeasure === 'containerHeight' ? element.container.offsetHeight - element.railYMarginHeight : element.container.offsetWidth - element.railXMarginWidth;
        var scrollbarDelta = containerDelta / element[axis];
        var maxScroll = containerDelta - element.container[containerMeasure];
        var newPosition = (element.scrollbar[axis] + delta) / scrollbarDelta;
        if (scroll) {
            newPosition = delta;
        }
        var scrollPosition = dir === 'y' ? 'scrollTop' : 'scrollLeft';
        if (newPosition < 0) {
            element.container[scrollPosition] = 0;
        } else if (newPosition > maxScroll) {
            element.container[scrollPosition] = maxScroll;
        } else {
            element.container[scrollPosition] = newPosition * scrollbarDelta;
        }
        resetReach(element, axis);
    }

    function handleScroll(element, delta, axis) {
        move(element, delta, axis, axis[0], true);
    }

    function setEvents(element, axis) {
        var scrollEvent = axis === 'y' ? 'ps-scroll-y' : 'ps-scroll-x';
        var mousedownEvent = 'mousedown';
        var mousemoveEvent = 'mousemove';
        var mouseupEvent = 'mouseup';
        var mouseenterEvent = 'mouseenter';
        var mouseleaveEvent = 'mouseleave';
        var eventName = axis === 'y' ? 'top' : 'left';
        var contentMeasure = axis === 'y' ? 'contentHeight' : 'contentWidth';
        var containerMeasure = axis === 'y' ? 'containerHeight' : 'containerWidth';
        element.eventHandlers[axis] = {};
        element.container.addEventListener(scrollEvent, function (event) {
            element.element[eventName] = event.target.scrollTop;
            dispatchCustomEvent(element.element, scrollEvent);
        });
        element.eventHandlers[axis].mousedown = function (event) {
            var i = event.pageY - element.element.getBoundingClientRect()[eventName];
            var scroll = element.container.scrollTop;
            var scrollBar = element.scrollbar[axis];
            if (axis === 'x') {
                i = event.pageX - element.element.getBoundingClientRect()[eventName];
                scroll = element.container.scrollLeft;
                scrollBar = element.scrollbar[axis];
            }
            var dir = scroll > i ? -1 : 1;
            var begin = element.container[containerMeasure] * dir;
            var isFirst = true;
            var cancel = function () {
                removeClass(element.scrollbar[axis], 'ps-active');
                removeElement(element.resizeHandler);
            };
            event.preventDefault();
            addClass(element.scrollbar[axis], 'ps-active');
            element.container.addEventListener(mousemoveEvent, function (event) {
                if (isFirst) {
                    element.element.style['pointer-events'] = 'none';
                    isFirst = false;
                }
                handleScroll(element, (event.pageY - element.element.getBoundingClientRect()[eventName] - i) * element[axis] / element.container[containerMeasure], axis);
            });
            element.container.addEventListener(mouseupEvent, function () {
                cancel();
                element.element.style['pointer-events'] = 'auto';
            });
            element.scrollbar[axis].addEventListener(mouseleaveEvent, cancel);
            document.addEventListener(mouseupEvent, cancel);
            addElement(element.container, element.resizeHandler);
            element.resizeHandler.addEventListener(mousedownEvent, function (event) {
                event.preventDefault();
                var lastPageY = event.pageY;
                addClass(element.resizeHandler, 'ps-active');
                document.addEventListener(mousemoveEvent, function (event) {
                    var delta = (element.container[containerMeasure] / element[element.axis]) * (event.pageY - lastPageY);
                    handleScroll(element, delta, axis);
                    lastPageY = event.pageY;
                }, { passive: true });
                document.addEventListener(mouseupEvent, function () {
                    removeClass(element.resizeHandler, 'ps-active');
                    document.removeEventListener(mousemoveEvent, function (event) {
                        var delta = (element.container[containerMeasure] / element[element.axis]) * (event.pageY - lastPageY);
                        handleScroll(element, delta, axis);
                        lastPageY = event.pageY;
                    }, { passive: true });
                }, { once: true });
            });
        };
        element.element.addEventListener(mousedownEvent, element.eventHandlers[axis].mousedown);
        element.element.addEventListener(mouseenterEvent, function () {
            element.eventHandlers[axis].mousedown = element.eventHandlers[axis].mousedown;
            element.eventHandlers[axis].mousedown();
        });
        element.element.addEventListener(mouseleaveEvent, function () {
            element.eventHandlers[axis].mousedown = function () {
                return false;
            };
            element.eventHandlers[axis].mousedown();
        });
    }

    function addElement(parent, element) {
        parent.appendChild(element);
    }

    function PerfectScrollbar(element, userSettings) {
        this.element = element;
        this.settings = extend({}, PerfectScrollbar.defaultSettings);
        extend(this.settings, userSettings);
        this.containerWidth = null;
        this.containerHeight = null;
        this.contentWidth = null;
        this.contentHeight = null;
        this.isRtl = getComputedStyle(element).direction === 'rtl';
        this.isNegativeScroll = (function () {
            var originalScrollLeft = element.scrollLeft;
            var result = null;
            element.scrollLeft = -1;
            result = element.scrollLeft < 0;
            element.scrollLeft = originalScrollLeft;
            return result;
        })();
        this.negativeScrollAdjustment = this.isNegativeScroll ? element.scrollWidth - element.clientWidth : 0;
        this.eventHandlers = {};
        this.scrollTop = element.scrollTop;
        this.scrollLeft = element.scrollLeft;
        this.axis = {
            x: 'top',
            y: 'left'
        };
        this.scrollbarXRail = create('ps__rail-x');
        addClass(this.scrollbarXRail, 'ps__rail');
        this.scrollbarX = create('ps__thumb-x');
        addClass(this.scrollbarX, 'ps__thumb');
        this.scrollbarXRail.appendChild(this.scrollbarX);
        this.element.appendChild(this.scrollbarXRail);
        this.scrollbarYRail = create('ps__rail-y');
        addClass(this.scrollbarYRail, 'ps__rail');
        this.scrollbarY = create('ps__thumb-y');
        addClass(this.scrollbarY, 'ps__thumb');
        this.scrollbarYRail.appendChild(this.scrollbarY);
        this.element.appendChild(this.scrollbarYRail);
        this.resizeHandler = create('ps__rail-x-ps__thumb-x-resize-handler');
        this.element.appendChild(this.resizeHandler);
        var axis = getComputedStyle(this.element).direction === 'rtl' ? 'rtl' : 'ltr';
        if (axis === 'rtl') {
            addClass(this.element, 'ps__rtl');
        }
        this.event = {
            y: {
                start: 0,
                end: 0
            },
            x: {
                start: 0,
                end: 0
            }
        };
        this.scrollbarYActive = false;
        this.scrollbarXActive = false;
        this.isScrollY = false;
        this.isScrollX = false;
        this.scrollbarYTop = 0;
        this.scrollbarXLeft = 0;
        this.init();
    }

    PerfectScrollbar.defaultSettings = {};

    PerfectScrollbar.prototype.init = function () {
        var _this = this;
        var updateGeometry = this.updateGeometry.bind(this);
        var moveBarX = this.moveBarX.bind(this);
        var moveBarY = this.moveBarY.bind(this);
        this.event.global = function () {
            _this.updateGeometry();
            moveBarX();
            moveBarY();
        };
        this.element.addEventListener('scroll', this.event.global);
        this.isRtl ? this.element.addEventListener('ps-scroll-x', this.event.global) : this.scrollbarXRail.addEventListener('mouseenter', function () {
            _this.showScrollbar('x');
            _this.hideScrollbar('x');
        });
        this.scrollbarX.addEventListener('mousedown', function (event) {
            return event.stopPropagation();
        });
        this.scrollbarX.addEventListener('click', function (event) {
            var element = _this.element;
            var offsetX = Math.max(event.target.getBoundingClientRect().left, 0);
            var dir = element.scrollLeft > offsetX ? -1 : 1;
            element.scrollLeft += dir * element.clientWidth;
        });
        this.scrollbarYRail.addEventListener('mouseenter', function () {
            _this.showScrollbar('y');
            _this.hideScrollbar('y');
        });
        this.scrollbarY.addEventListener('mousedown', function (event) {
            return event.stopPropagation();
        });
        this.scrollbarY.addEventListener('click', function (event) {
            var element = _this.element;
            var offsetY = Math.max(event.target.getBoundingClientRect().top, 0);
            var dir = element.scrollTop > offsetY ? -1 : 1;
            element.scrollTop += dir * element.clientHeight;
        });
        this.element.addEventListener('mouseenter', function () {
            _this.showScrollbar('x');
            _this.showScrollbar('y');
        });
        this.element.addEventListener('mouseleave', function () {
            _this.hideScrollbar('x');
            _this.hideScrollbar('y');
        });
        this.element.addEventListener('mouseenter', function () {
            _this.showScrollbar('x');
            _this.showScrollbar('y');
        });
        this.element.addEventListener('mouseleave', function () {
            _this.hideScrollbar('x');
            _this.hideScrollbar('y');
        });
        this.scrollbarXRail.addEventListener('mouseenter', function () {
            _this.scrollbarXActive = true;
            _this.scrollbarX.classList.add('ps__thumb-x--active');
            _this.scrollbarY.classList.add('ps__thumb-y--active');
        });
        this.scrollbarXRail.addEventListener('mouseleave', function () {
            _this.scrollbarXActive = false;
            _this.scrollbarX.classList.remove('ps__thumb-x--active');
            _this.scrollbarY.classList.remove('ps__thumb-y--active');
        });
        this.scrollbarYRail.addEventListener('mouseenter', function () {
            _this.scrollbarYActive = true;
            _this.scrollbarY.classList.add('ps__thumb-y--active');
            _this.scrollbarX.classList.add('ps__thumb-x--active');
        });
        this.scrollbarYRail.addEventListener('mouseleave', function () {
            _this.scrollbarYActive = false;
            _this.scrollbarY.classList.remove('ps__thumb-y--active');
            _this.scrollbarX.classList.remove('ps__thumb-x--active');
        });
        this.element.addEventListener('mouseenter', function () {
            _this.scrollbarX.classList.add('ps__thumb-x--active');
            _this.scrollbarY.classList.add('ps__thumb-y--active');
        });
        this.element.addEventListener('mouseleave', function () {
            _this.scrollbarX.classList.remove('ps__thumb-x--active');
            _this.scrollbarY.classList.remove('ps__thumb-y--active');
        });
    };

    PerfectScrollbar.prototype.moveBarX = function () {
        var element = this.element;
        var scrollbarX = this.scrollbarX;
        var scrollbarXRail = this.scrollbarXRail;
        var max = parseInt(getComputedStyle(scrollbarXRail).width, 10);
        var size = parseInt(getComputedStyle(scrollbarX).width, 10);
        var elementWidth = element.offsetWidth;
        var elementScrollWidth = element.scrollWidth;
        var isRtl = this.isRtl;
        var negatePadding = isRtl ? -this.negativeScrollAdjustment : 0;
        var padding = this.negativeScrollAdjustment;
        var newX = element.scrollLeft * (max - size + padding) / (elementScrollWidth + negatePadding);
        scrollbarX.style.left = newX + 'px';
    };

    PerfectScrollbar.prototype.moveBarY = function () {
        var element = this.element;
        var scrollbarY = this.scrollbarY;
        var scrollbarYRail = this.scrollbarYRail;
        var max = parseInt(getComputedStyle(scrollbarYRail).height, 10);
        var size = parseInt(getComputedStyle(scrollbarY).height, 10);
        var elementHeight = element.offsetHeight;
        var elementScrollHeight = element.scrollHeight;
        var newY = element.scrollTop * (max - size) / (elementScrollHeight - elementHeight);
        scrollbarY.style.top = newY + 'px';
    };

    PerfectScrollbar.prototype.updateGeometry = function () {
        var element = this.element;
        var settings = this.settings;
        var containerWidth = element.offsetWidth;
        var containerHeight = element.offsetHeight;
        var contentWidth = element.scrollWidth;
        var contentHeight = element.scrollHeight;
        var scrollWidth = contentWidth - containerWidth + this.negativeScrollAdjustment;
        var scrollHeight = contentHeight - containerHeight;
        var scrollbarXActive = scrollWidth > 0;
        var scrollbarYActive = scrollHeight > 0;
        var railXWidth = containerWidth - (settings.paddingAbsolute ? getPadding(element) : 0) - (scrollbarYActive ? settings.railXWidth : 0);
        var railYHeight = containerHeight - (settings.paddingAbsolute ? getPadding(element) : 0) - (scrollbarXActive ? settings.railYHeight : 0);
        extend(this, {
            containerWidth: containerWidth,
            containerHeight: containerHeight,
            contentWidth: contentWidth,
            contentHeight: contentHeight,
            isRtl: getComputedStyle(element).direction === 'rtl',
            railXWidth: railXWidth,
            railYHeight: railYHeight,
            scrollbarXActive: scrollbarXActive,
            scrollbarYActive: scrollbarYActive
        });
        if (settings.railXWidth) {
            element.style.overflowX = 'hidden';
        }
        if (settings.railYHeight) {
            element.style.overflowY = 'hidden';
        }
        if (!scrollbarYActive && !scrollbarXActive) {
            element.classList.add('ps--empty');
        } else {
            element.classList.remove('ps--empty');
        }
        if (this.isRtl) {
            element.classList.add('ps--rtl');
        } else {
            element.classList.remove('ps--rtl');
        }
        if (settings.forceVisible === 'x' && settings.railXWidth) {
            element.style.overflowX = 'scroll';
        }
        if (settings.forceVisible === 'y' && settings.railYHeight) {
            element.style.overflowY = 'scroll';
        }
        if (scrollbarXActive) {
            this.railXWidth = railXWidth;
            this.railXMarginWidth = settings.railXMarginWidth;
            this.railXRail.style.width = railXWidth + 'px';
            this.scrollbarXRail.style.display = 'block';
            this.scrollbarXRail.style.visibility = 'visible';
            this.scrollbarX.style.width = Math.max.apply(Math, filterChildren(this.scrollbarXRail, 'ps__thumb-x')[0].style.width.split('px').map(function (i) {
                return parseInt(i);
            })) + 'px';
            this.scrollbarXRail.style.visibility = this.scrollbarX.offsetWidth ? 'visible' : 'hidden';
            if (this.scrollbarX.offsetWidth) {
                this.element.classList.add('ps--active-x');
            } else {
                this.element.classList.remove('ps--active-x');
            }
        }
        if (scrollbarYActive) {
            this.railYHeight = railYHeight;
            this.railYMarginHeight = settings.railYMarginHeight;
            this.railYRail.style.height = railYHeight + 'px';
            this.scrollbarYRail.style.display = 'block';
            this.scrollbarYRail.style.visibility = 'visible';
            this.scrollbarY.style.height = Math.max.apply(Math, filterChildren(this.scrollbarYRail, 'ps__thumb-y')[0].style.height.split('px').map(function (i) {
                return parseInt(i);
            })) + 'px';
            this.scrollbarYRail.style.visibility = this.scrollbarY.offsetHeight ? 'visible' : 'hidden';
            if (this.scrollbarY.offsetHeight) {
                this.element.classList.add('ps--active-y');
            } else {
                this.element.classList.remove('ps--active-y');
            }
        }
        return this;
    };

    PerfectScrollbar.prototype.showScrollbar = function (axis) {
        if (axis === 'x' && this.scrollbarXActive) {
            this.scrollbarXRail.style.visibility = 'visible';
        }
        if (axis === 'y' && this.scrollbarYActive) {
            this.scrollbarYRail.style.visibility = 'visible';
        }
    };

    PerfectScrollbar.prototype.hideScrollbar = function (axis) {
        if (axis === 'x' && this.scrollbarXActive) {
            this.scrollbarXRail.style.visibility = 'hidden';
        }
        if (axis === 'y' && this.scrollbarYActive) {
            this.scrollbarYRail.style.visibility = 'hidden';
        }
    };

    PerfectScrollbar.prototype.destroy = function () {
        var element = this.element;
        var settings = this.settings;
        var elementClass = element.className.replace(/(^|\s)ps--active-x/g, '').replace(/(^|\s)ps--active-y/g, '').replace(/(^|\s)ps--focus/g, '');
        if (this.isRtl) {
            elementClass.replace(/(^|\s)ps--rtl/g, '');
        }
        element.className = elementClass;
        this.scrollbarXRail.parentNode.removeChild(this.scrollbarXRail);
        this.scrollbarYRail.parentNode.removeChild(this.scrollbarYRail);
        removeElement(this.resizeHandler);
        if (this.isNegativeScroll) {
            var scrollLeft = this.element.scrollLeft;
            this.element.scrollLeft = 0;
            this.element.addEventListener('scroll', function () {
                return _this.element.scrollLeft = scrollLeft;
            });
        }
        this.element = null;
    };

    return PerfectScrollbar;
});